extends mozilla

block mainContent
  h2 Repositories
  ul
    li: :markdown
      mozilla-central (Latest for Firefox):  
      [http://hg.mozilla.org/mozilla-central/](http://hg.mozilla.org/mozilla-central/)
    li: :markdown
      Mozilla Aurora:  
      [http://hg.mozilla.org/releases/mozilla-aurora/](http://hg.mozilla.org/releases/mozilla-aurora/)
    li: :markdown
      Mozilla Beta:  
      [http://hg.mozilla.org/releases/mozilla-beta/](http://hg.mozilla.org/releases/mozilla-beta/)
    li: :markdown
      Mozilla Release:  
      [http://hg.mozilla.org/releases/mozilla-release/](http://hg.mozilla.org/releases/mozilla-release/)
    li: :markdown
      comm-central (Latest for Thunderbird, SeaMonkey, Lightning/Sunbird):  
      [http://hg.mozilla.org/comm-central/](http://hg.mozilla.org/comm-central/)
    li: :markdown
      Mozilla Inbound (Push changes here to get them on mozilla-central):  
      [http://hg.mozilla.org/integration/mozilla-inbound/](http://hg.mozilla.org/integration/mozilla-inbound)
    li: :markdown
      Mozilla ESR 10:  
      [http://hg.mozilla.org/releases/mozilla-esr10](http://hg.mozilla.org/releases/mozilla-esr10)

  h2 Extensions
  ul
    li: :markdown
      [Firebug](http://getfirebug.com/releases/firebug/1.7/firebug-1.7.1.xpi'>Firebug)  
      Edit, debug, and monitor JavaScript, CSS, HTML, and external XUL
    li: :markdown
      [Chromebug](http://getfirebug.com/releases/chromebug/chromebug-1.7.1.xpi) (Requires a matching Firebug version)  
      Debug Firefox itself's XUL, XBL, Javascript, ... (debug chrome)
    li: :markdown
      [Extension developer](https://addons.mozilla.org/en-US/firefox/addon/extension-developer/)  
      Interactive JavaScript shell, live preview HTML and XUL editors, regular expression and XPath testers, and packaging tool 

  h2 Plugins
  ul
    li Copy to: &lt;installDir&gt;\Plugins
    li Environment variable MOZ_DEBUG_CHILD_PROCESS=1 can be used to delay 30 seconds when loading plugin-container before the plugin is loaded.
    li a(href='https://developer.mozilla.org/En/Plugins:_The_first_install_problem') Plugin development

  h2 Debugging
  ul
    li Use Firebug and Chromebug to debug XUL, XBL, JavaScript
    li Debug C++ src in Windows: Open VS2010, select open project, select dist/bin/firefox.exe in your obj dir.   Press F5.  Change source, do an incremental build, open the source and set breakpoints in VS2010.
    li To avoid having debug assertions and to have them show up in the log instead, set this environment variable: XPCOM_DEBUG_BREAK=warn
 
  h2 Debugging XUL apps
  ul
    li Preferences should be in a .js file in the directory %appname%/defaults/preferences/.
    li: :markdown
      /* debugging prefs */  
      pref("browser.dom.window.dump.enabled", true);  
      pref("javascript.options.showInConsole", true);  
      pref("javascript.options.strict", true);  
      pref("nglayout.debug.disable_xul_cache", true);  
      pref("nglayout.debug.disable_xul_fastload", true);
    li: :markdown
      To write to the Error Console:  
      Components.utils.reportError("0");
    li: :markdown
      To write to the console:  
      dump("hello world!");

  h2 Command Line
  ul
    li -purgecaches use when changing XUL, XBL, JSM, ...
    li -no-remote allows you to run multiple instances of the program with different profiles
    li -console starts the application with a debug console
    li -ProfileManager starts the application with the profile manager
    li -P "profilename" starts the application with the specified profile
    li -console starts firefox with an extra console, you can then enable extra logs like app.update.log in about:config
    li: a(href='https://developer.mozilla.org/En/Command_Line_Options') Other command line options

  h2 Crashes
  ul
    li about:crashes gives you links to your crashes
    li: a(href='https://crash-stats.mozilla.com/products/Firefox') Online crash reports and stats

  h2 Getting help
  ul
    li: a(href='nntp://news.mozilla.org') NNTP Server
    li: a(href='https://groups.google.com/forum/?pli=1#!forum/mozilla.dev.identity') Google group
    li: a(href='https://lists.mozilla.org/listinfo/dev-identity') Mailing list

  h2 Useful links when getting started
  ul
    li: :markdown
      [Ability to edit bugs on bugzilla]('http://www.gerv.net/hacking/before-you-mail-gerv.html') Ability to edit bugs on bugzilla) (editbugs privs)
    li: a(href='http://www.mozilla.org/hacking/committer/') Getting commit access
    li: a(href='https://developer.mozilla.org/en/Mozilla_Source_Code_Directory_Structure') Mozilla source code directory structure

  h2 Useful links forever
  ul
    li: a(href='https://bugzilla.mozilla.org/') Bugzilla
    li: a(href='http://hg.mozilla.org/mozilla-central/pushloghtml') Mozilla central push log
    li: a(href='http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/') Mozilla central Nightly builds
    li: a(href='http://mxr.mozilla.org/') MXR (Browse source code online)
    li: a(href='http://dxr.mozilla.org/') DXR (Search source code online)
    li: a(href='https://developer.mozilla.org/en/Tinderbox') Tinderbox (Tool to ensure compiles on various platforms and all automated)
    li: a(href='https://wiki.mozilla.org/Modules') Modules and module owners (for code reviews and questions)
    li: a(href='https://crash-stats.mozilla.com/products/Firefox') Top crash reports
    li: a(href='http://www.mozilla.org/MPL/boilerplate-1.1/') License Boilerplate
    li: a(href='http://brasstacks.mozilla.com/toolbox/') Tools
    li: a(href='http://air.mozilla.org/') Air Mozilla
    li: a(href='http://air.mozilla.org/old-air-mozilla/') Old Air Mozilla

  h2 Useful links if you are an employee
  ul
    li: a(href='https://intranet.mozilla.org/') Intranet
    li: a(href='https://intranet.mozilla.org/pto/') Submitting PTO
    li: a(href='https://phonebook.mozilla.org') Internal phonebook
    li: a(href='https://www.hrpassport.com/') TriNet

  h2 Coding style
  ul
    li Line length: 80 chars or less
    li Indenting: 2 spaces (no tabs)
    li Function definitions, braces on newlines
    li: :markdown
      Conditionals and loops:  
      if (condition) {  
      }
    li: :markdown
      Multiline, align with parentheses:  
      if (argument1 == paramvalu1 &amp;&amp; argument2 == paramvalue2 &amp;&amp;  
      &nbsp;&nbsp;&nbsp; argument3 == paramvalue3 &amp;&amp; argument4 == paramValue4) {  
      }
    li Comments, use space after comment indicator
    li: a(href='https://developer.mozilla.org/En/Mozilla_Coding_Style_Guide') More info on coding style

  h2 Build commands
  ul
    li: :markdown
      Full build of Firefox: (~ 1h)  
      make -f client.mk
    li: :markdown
      To rebuild Firefox without pulling the tree: (~25min)  
      make -f client.mk build_all_depend
    li: :markdown
      To clean: (~2min)  
      make -f client.mk distclean
    li Incremental builds (~1min, see below section)
    li: :markdown
      Full build of Thunderbird or other comm-central  
      python client.py checkout (which clones a copy of mozilla-central inside a subfolder called mozilla)  
      make -f client.mk
    li: :markdown
      Make an objdir for partial tree  
      cd $(objdir)  
      ../build/autoconf/make-makefile component/path  
      cd $(objdir)/component/path  
      make
    li: :markdown
      Regenerating a Makefile from a Makefile.in  
      cd $(objdir)  
      ../build/autoconf/make-makefile dir_path/with/makefile_dot_in
    li: :markdown
      pymake config:  
      notepad c:\\\\users\\\\bbondy\\\\.profile  
      alias pymake=/c/project/mozillajjmozilla-central/build/pymake/make.py
    li: :markdown
      Building with pymake:  
      mkdir objdirpymake  
      cd objdirpymake  
      ../configure (if fails, run again)  
      pymake -sj4 (4 is the number of cores)
    li: :markdown
      Or building with pymake:  
      python build/pymake/make.py -f client.mk
    li: :markdown
      Running tests with pymake:  
      python -OO ../build/pymake/make.py mochitest-plain
    li: :markdown
      Incremental builds with pymake:  
      pymake -sC widget/windows

  h2 Example .mozconfig files  (Gecko 2.0 and up)
  ul
    li: :markdown
      Firefox Debug .mozconfig contents: (Using mozilla-central)  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-ff-debug  
      ac_add_options --enable-application=browser  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize  
      ac_add_options --enable-tests
    li: :markdown
      Firefox Release .mozconfig contents: (Using mozilla-central)  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-ff-debug  
      ac_add_options --enable-application=browser  
      ac_add_options --enable-optimize  
      ac_add_options --enable-debug-symbols
    li: :markdown
      xulrunner .mozconfig contents: (Using mozilla-central)  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-xulrunner-debug  
      ac_add_options --enable-application=xulrunner  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize
    li: :markdown
      Thunderbird .mozconfig contents: (Using comm-central)  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-tb-debug  
      ac_add_options --enable-application=mail  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize  
      #If you also want Lightning  
      ac_add_options --enable-calendar
    li: :markdown
      SeaMonkey .mozconfig contents: (Using comm-central)  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-seamonkey-debug  
      ac_add_options --enable-application=suite  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize
    li: :markdown
      Sunbird .mozconfig contents: (Using comm-central)  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-sunbird-debug  
      ac_add_options --enable-application=calendar  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize
    li: :markdown
      Fennec Win32 .mozconfig  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir  
      ac_add_options --enable-application=mobile  
      # For improved compile speeds, all optional.  
      mk_add_options MOZ_MAKE_FLAGS=-j4  
      #export CCACHE_HARDLINK=1  
      #export MOZ_DEBUG_SYMBOLS=1  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize  
      # Needed on Win32 to fix problem with Windows Vista SDK  
      ac_add_options --disable-accessibility
    li: :markdown
      Windows 8 Metro .mozconfig  
      mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir  
      mk_add_options MOZ_MAKE_FLAGS=-j4  
      ac_add_options --enable-debug  
      ac_add_options --disable-optimize  
      ac_add_options --enable-tests  
      ac_add_options --enable-metro

  h2 Incremental builds
  ul
    li Don't use make in subdirectories from within the source dirs, use the obj dir which is created when you first build (Example: obj-i686-pc-mingw32\widget)
    li: :markdown
      Example if you have changes to /widget:  
      cd obj-i686-pc-mingw32  
      make -C widget  
      make -C toolkit/library

  h2 Logging
  ul
    li: :markdown
      Logging Javascript with Firebug/Chromebug/web console:  
      console.log("my output");  
      console.log("%s is %d years old.", "Bob", 42).
    li: :markdown
      Netscape portable runtime logging ([PR_LOG](http://www.mozilla.org/projects/nspr/reference/html/prlog.html)): Environment variables:  
      NSPR_LOG_FILE = WinDebug and it will output to the debug output window or use NSPR_LOG_FILE=C:\nspr-log.txt to output to a file by that name  
      NSPR_LOG_MODULES  can specify which modules to log with the, example NSPR_LOG_MODULES = nsWindowsWidgets:5 (5 is the log level)  
      You can use NSPR_LOG_MODULES=all:5 to enable all module logging

  h2 Finding source of regressions
  ul
    li Do a binary search on the nightly builds until you narrow down a build that introduced the regression
    li Use the push log to review changes in that time span
    li: a(href='http://mozilla.github.com/mozregression/')Use MozRegression

  h2 Submitting a patch for review
  ul
    li You don't have commit access at first, instead create a patch.
    li: :markdown
      Setup your author information (your ~/.hgrc or ~/mercurial.ini on Windows):  
      [ui]  
      username = Your Name &lt;your@email.com&gt;
    li: :markdown
      Use the mq extension, add to your ~/.hgrc or ~/mercurial.ini on Windows  
      [extensions]  
      hgext.mq =
    li: a(href='http://blog.bonardo.net/2010/06/22/so-youre-about-to-use-checkin-needed') When submitting do this

  h2 Working with hg and patches
  ul
    li: :markdown
      To create a patch:  
      hg qnew bugXXXXXX.patch  
        
      On popup:  
      Bug XXXXXX - Description of your fix  
    li: :markdown
      To take a file out of a patch:  
      hg qrefresh -X re:regexp_pattern_of_files_to_remove
    li: :markdown
      To refresh changes into your patch:  
      hg qrefresh
    li: :markdown
      To see the status of changes: (after you take out files it should re-appear in the changes)  
      hg status
    li: :markdown
      Undo application of a patch in your MQ patch queue: (Removes the patch from your commit tree and working directory)  
      hg qpop (To unapply the last applied patch)  
      hg qpop -a (To unapply all patches)  
      hg qpop name.patch (To unapply all patches up to but not including the specified patch)
    li: :markdown
      Apply a patch which is in your MQ patch queue: (Re-adds the patch to your commit tree and working directory, you can apply more than one patch)  
      hg qpush (To apply the next patch in the series)  
      hg qpush -a (To apply all patches)  
      hg qpush name.patch (To apply all patches in the series up to and including the named patch)
    li: :markdown
      List which patches are in your MQ patch queue:  
      hg qseries
    li: :markdown
      List which patches in your MQ patch queue are applied (pushed):  
      hg qapplied
    li: :markdown
      List which patches in your MQ patch queue are not yet applied (pushed):  
      qunapplied
    li: :markdown
      To delete a patch from your MQ patch queue: (Patch must first be unapplied)  
      hg qdelete
    li: :markdown
      To turn a patch into a permanent changeset: (Patch must first be applied)  
      hg qfinish
    li: :markdown
      To turn a normal changeset into a patch: (Patch must first be unapplied)  
      hg qimport -r tip
    li: :markdown
      Convert a patch to a finalized changeset: (Patch must first be applied)  
      hg qfinish tip  
      hg qfinish -a (for all of the patches
    li: :markdown
      To make a backup of your patches directory: (Saves the patches backup to .hg/patches.N)  
      hg qsave
    li: :markdown
      To import someone else's patch into your MQ patch queue:  
      hg qimport patchname.patch (You must later also apply it with qpush)  
    li: :markdown
      To import someone else' patch with a different patch strip count:  
      patch -pN (to apply the patch, where N is the strip count of the patch)  
      qnew (to create a new patch)  
      hg addremove (to pickup any files added/removed by the patch)  
      qrefresh (to refresh the patch)
    li: :markdown
      To change the ordering of how patches are applied  
      Manually edit your .hg/patches/series file, one patch name per line.
    li: :markdown
      To rollup several patches into one  
      hg diff -r qparent &gt; rollup.patch
    li: :markdown
      See last 50 pushed  
      hg log -l 50
    li: :markdown
      Undoing a qfinish or remove last commit into a patch  
      hg qimport -r tip (Make sure you have no other patches applied)
    li: :markdown
      To backout a revision  
      hg backout revnumber
    li: :markdown
      Folding a patch in your queue onto another one  
      hg qgoto base_patch.patch  
      hg qfold patch_to_fold_in_base_patch.patch  
    li: :markdown
      Renaming a patch  
      hg qrename new_patch_name.patch
    li: :markdown
      Merge all changes from parent repo into your branch  
      cd yourbranchdir  
      hg update  
      hg pull other-repo  
      hg merge  
      hg commit  
      hg push
    li: :markdown
      Clone a repository up until a specific changeset  
      hg clone -r revisionid http://hg.mozilla.org/mozilla-central/ repo_name
    li: :markdown
      Remove a changeset and all of its decendants  
      hg strip changesetid
    li: :markdown
      Rebase one repository to another by beheading the old tip  
      cd repo_you_want_to_change  
      hg pull repo_to_change_to  
      hg heads .  
      hg update -r revisin_to_forget_about  
      hg commit --close-branch  
      hg update -r revision_to_use  
      hg push --force

  h2 Documentation
  ul
    li: a(href='https://developer.mozilla.org/Project:en/How_to_Help) How to help with documentation

  h2 Testing and QA
  ul
    li: :markdown
      Automated testing [Link 1](https://developer.mozilla.org/en/Developing_Tests) and [Link 2](https://developer.mozilla.org/en/Mozilla_automated_testing)
    li: a(href='https://litmus.mozilla.org/') Litmus (Manual testing)
    li: :markdown
      [Mochitest](https://developer.mozilla.org/en/Mochitest) for testing via pages (HTML, XHTML, SVG, XUL, XBL)  (mochitest-plain, mochitest-chrome, mochitest-browser-chrome, mochitest-a11y or mochitest-ipc)
    li: :markdown
      [Browser Chrome](https://developer.mozilla.org/en/Browser_chrome_tests') Browser chrome mochitest) for testing via JS
    li: :markdown
      [Reftests](https://developer.mozilla.org/en/Creating_reftest-based_unit_tests) for testing if 2 pages that should render the same actually do
    li Compiled code tests
    li: :markdown
      [XPCShell tests](https://developer.mozilla.org/en/Writing_xpcshell-based_unit_tests) for testing XPCOM components

  h2 Automated test run examples
  ul
    li: :markdown
      mochitest-plain:  
      TEST_PATH=content/html/content/test make -C $(OBJDIR) mochitest-plain
    li: :markdown
      mochitest-chrome: (like a mochitest but with chrome privs)  
      TEST_PATH=widget/tests/ make -C $(OBJDIR) mochitest-chrome
    li: :markdown
      mochitest-browser-chrome: (Chrome JS tests)  
      TEST_PATH=widget/tests/ make -C $(OBJDIR) mochitest-browser-chrome
    li: :markdown
      xpcshell test, whole directory:  
      cd $(OBJDIR)  
      make -C widget/tests/ xpcshell-tests
    li: :markdown
      xpcshell single test:  
      cd $(OBJDIR)  
      make SOLO_FILE="testname.js" -C widget/tests/ check-one
    li: :markdown
      reftests:  
      TEST_PATH=image/test/reftest/reftest.list make -C obj-i686-pc-mingw32 reftest

  h2 Troubleshooting build problems
  ul
    li: :markdown
      I built on windows, and had crashes on startup:  
      The reason ended up being because I was using the same profile as my FF4 and some extensions were causing the crash (Firebug in particular).  Simply disabling the extensions fixed the problem.
    li: :markdown
      If you are building on Windows with VC2010, and get the error, install the [Win 7.0 SDK](http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&displaylang=en) instead.  Alternatively if you really want to use 7.1 you may need to [patch your guess-msvc.bat](https://bugzilla.mozilla.org/show_bug.cgi?id=631910).

  h2 about: URIs
  ul
    li: :markdown
      Blank page:  
      about:blank
    li: :markdown
      Addons:  
      about:addons
    li: :markdown
      To adjust settings:  
      about:config
    li: :markdown
      To see how your Firefox was built:  
      about:buildconfig
    li: :markdown
      To see all of your crash reports:  
        about:crashes
    li: a(href='http://en.wikipedia.org/wiki/About_URI_scheme#Mozilla-specific_about:_addresses') Other

  h2 Common about:config prefs
  ul
    li: :markdown
      Allow remote XUL from local computer:  
      dom.allow_XUL_XBL_for_file: true;

  h2 XPCOM objects in JavaScript
  ul
    li: :markdown
      Creating an XPCOM component:  
      var cid = "@brianbondy.com/componentname;1"  
      var obj = Components.classes[cid].createInstance();  
      obj = obj.QueryInterface(Components.interfaces.IMyInterface)
    li: :markdown
      Listing XPCOM components:  
      for (var c in Components.classes) { print(c); }
    li: :markdown
      Listing XPCOM interfaces:  
      for (var i in Components.interfaces) { print(i); }

  h2 How to push to try
  ul
    li Need commit access level 1
    li: a(href='https://wiki.mozilla.org/ReleaseEngineering/TryServer') Try server info
    li: a(href='href='http://trychooser.pub.build.mozilla.org/') TryChooser - try command line generator
    li: a(href='https://tbpl.mozilla.org/') Build bot results
    li: :markdown
      In .hgrc (or mercurial.ini) add:  
      [paths]  
      try = ssh://hg.mozilla.org/try
    li: :markdown
      To push the applied hg queue patches to the try server:  
      hg qrefresh --message "try: -b do -p all -u all -t all"  
      hg push -f try

  h2 How to push a changeset from your MQ
  ul
    li If you want your patch to land on Aurora, or Firefox Beta you need to request it in Bugzilla.  only for severe security, stability, or regressions recently introduced.  Provide risk/reward in ticket.
    li Need commit access level 3
    li: :markdown
      In .hgrc (or mercurial.ini) add:  
      [paths]  
      mozilla-inbound = http://hg.mozilla.org/integration/mozilla-inbound/
    li: :markdown
      To push:  
      Move your patch to the top of your queue  
      hg pull  
      hg update  
      hg qpush  
      hg qrefresh -m "Bug xxx - Blah. Blah. Blah. r=xyz"  
      hg qfinish -a  
      hg push mozilla-inbound
    li: a(href='https://wiki.mozilla.org/Tree_Rules/Inbound#Please_do_the_following_after_pushing_to_inbound') Rules for pushing

  h2 Bugzilla keywords
  ul
    li addon-compat: If your change may affect addon compatibility
    li dev-doc-needed: If your change may need documentation
    li regression: If your bug is a regression
    li checkin-needed: If a checkin is needed for a patch but the author can't do it themselves because of privs or some other reason
    li: a(href='https://bugzilla.mozilla.org/describekeywords.cgi') Others

  h2 Firefox UI debugging
  ul
    li Extesion Developer Extension
    li
      | Or in any build of Firefox:
      ul
        li Type about:
        li Open the web console
        li Type in the following:
        li: :markdown
          Components.utils.import('resource://gre/modules/Services.jsm');  
          this.__proto__ = Services.wm.getMostRecentWindow('navigator:browser');  
        li Now you can use anything you can in the extensions developer extension

  h2 Contributor info and Metrics
  ul
    li: a(href='https://metrics.mozilla.com/data') Contributor Map / Contribution Trends
    li: a(href='#', title='Phonebook not yet available') Phonebook

  h2 Doing Code Reviews
  ul
    li: a(href='https://wiki.mozilla.org/User:GavinSharp/Code_Review') Code Review Guide
    li
      | Quick Points:
      ul
        li MultiByte vs. Wide character set comm-central defaults to ASCII
        li Check if Windows platform API available on WinXP and above
        li Does it pass try?
        li Formatting? (But don't be too strict)
        li Comments, typos, spelling
        li Did you test in scenario X?
        li New import libs in toolkit/library?
        li Should it have tests?
        li Interface change? Change IID, sr required, addon-compat keyword
        li Documentation needed?
        li Mark keywords for post-fix work: dev-doc-needed, privacy-review-needed, sec-review-needed, user-doc-needed, addon-compat, release tracking flags, in-testsuite flag

  h2 Commit flags
  ul
    li
      | Append to the end of patches:
      ul
        li reviewed by: r=nickname
        li approved by: a=nickname
        li super reviewed by: sr=nickname

  h2 Mentoring bugs
  ul
    li Add to whiteboard [mentor=bbondy]
    li: a(href='https://wiki.mozilla.org/Mentors') More info

  h2 Release cycle
  ul
    li
      | Every 6 weeks:
      ul
        li Nightly -&gt; Aurora
        li Aurora -&gt; Beta
        li Beta -&gt; Release
    li: a(href='https://wiki.mozilla.org/RapidRelease/Calendar') Release calendar

  h2 Personal files on people.mozilla.com
  ul
    li: :markdown
      Add to your C:\Users\bbondy\.ssh\config file:  
      Host people.mozilla.com  
      &nbsp;&nbsp;User bbondy  
      &nbsp;&nbsp;IdentityFile C:\Users\bbondy\.ssh\bbondy.pub
    li Your must already have L1 commit access, i.e. your public key is already on the server.
    li: :markdown
      You can upload files to a URL like: http://people.mozilla.com/~bbondy  
      Anything under the /home/bbondy/public_html will show up at the http address above.
    li: :markdown
      On Windows connect with putty sftp:  
      psftp bbondy@people.mozilla.com  
      Enter your private key password  
      put filename.ext
  
  h2 Project Branches
  ul
    li TBPL results: https://tbpl.mozilla.org/?tree=BRANCHNAME
    li Self serve build API to create dep, Nightly, or PGO builds: https://build.mozilla.org/buildapi/self-serve/BRANCHNAME

  h2 Themes
  ul
    li: a(href='https://developer.mozilla.org/en/Themes) More info on themes

